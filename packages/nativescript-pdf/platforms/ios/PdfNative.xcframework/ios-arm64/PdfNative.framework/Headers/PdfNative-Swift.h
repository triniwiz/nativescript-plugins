#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
#ifndef PDFNATIVE_SWIFT_H
#define PDFNATIVE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <PdfNative/PdfNative.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PdfNative",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSCoder;

SWIFT_CLASS("_TtC9PdfNative12LDOTiledView")
@interface LDOTiledView : UIView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)drawRect:(CGRect)rect;
@end

@class NSString;
@class NSCPdfDocument;
@class NSData;

SWIFT_CLASS_NAMED("NSCPdf")
@interface NSCPdf : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSCPdf * _Nonnull instance;)
+ (NSCPdf * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSCPdfDocument * _Nullable)loadFromPathWithPath:(NSString * _Nonnull)path password:(NSString * _Nullable)password SWIFT_WARN_UNUSED_RESULT;
- (NSCPdfDocument * _Nullable)loadFromBytesWithBytes:(NSData * _Nonnull)bytes password:(NSString * _Nullable)password SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("NSCPdfCellWidth")
@interface NSCPdfCellWidth : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSCPdfCellWidth * _Nonnull Auto;)
+ (NSCPdfCellWidth * _Nonnull)Auto SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSCPdfCellWidth * _Nonnull Wrap;)
+ (NSCPdfCellWidth * _Nonnull)Wrap SWIFT_WARN_UNUSED_RESULT;
+ (NSCPdfCellWidth * _Nonnull)Fixed:(float)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("NSCPdfColor")
@interface NSCPdfColor : NSObject
@property (nonatomic) int32_t r;
@property (nonatomic) int32_t g;
@property (nonatomic) int32_t b;
@property (nonatomic) int32_t a;
- (nonnull instancetype)init:(int32_t)r :(int32_t)g :(int32_t)b OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(int32_t)r :(int32_t)g :(int32_t)b a:(int32_t)a OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
+ (NSCPdfColor * _Nonnull)gray:(int32_t)value SWIFT_WARN_UNUSED_RESULT;
+ (NSCPdfColor * _Nonnull)grey:(int32_t)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("NSCPdfColumnDef")
@interface NSCPdfColumnDef : NSObject
@property (nonatomic, copy) NSString * _Nonnull header;
@property (nonatomic, copy) NSString * _Nullable dataKey;
- (nonnull instancetype)initWithHeader:(NSString * _Nonnull)header dataKey:(NSString * _Nullable)dataKey OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("NSCPdfColumnKey")
@interface NSCPdfColumnKey : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCPdfDocumentConfig;
@class NSError;
@class NSCPdfPagerSize;
enum NSCPdfOrientation : int32_t;
@class NSCPdfTextOptions;
@class UIImage;
enum NSCPdfStyle : NSInteger;
@class NSMutableData;
@class NSCPdfTable;

SWIFT_CLASS_NAMED("NSCPdfDocument")
@interface NSCPdfDocument : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithConfig:(NSCPdfDocumentConfig * _Nonnull)config OBJC_DESIGNATED_INITIALIZER;
- (NSError * _Nullable)saveSyncTo:(NSString * _Nonnull)file SWIFT_WARN_UNUSED_RESULT;
- (void)saveTo:(NSString * _Nonnull)file callback:(void (^ _Nonnull)(NSError * _Nullable))callback;
@property (nonatomic, readonly) NSInteger count;
@property (nonatomic, readonly) float width;
@property (nonatomic, readonly) float height;
@property (nonatomic) float fontSize;
- (void)setFontColor:(int32_t)r :(int32_t)g :(int32_t)b a:(int32_t)a;
- (void)setFontColor:(int32_t)r :(int32_t)g :(int32_t)b;
- (void)setDrawColor:(int32_t)r :(int32_t)g :(int32_t)b a:(int32_t)a;
- (void)setDrawColor:(int32_t)r :(int32_t)g :(int32_t)b;
- (void)setFillColor:(int32_t)r :(int32_t)g :(int32_t)b a:(int32_t)a;
- (void)setFillColor:(int32_t)r :(int32_t)g :(int32_t)b;
@property (nonatomic) float lineWidth;
- (void)addPage;
- (void)addPageWithSize:(NSCPdfPagerSize * _Nonnull)size orientation:(enum NSCPdfOrientation)orientation;
- (void)addText:(NSString * _Nonnull)text :(float)x :(float)y :(NSCPdfTextOptions * _Nullable)options;
- (void)addImageWithBase64:(NSString * _Nonnull)base64 :(NSString * _Nonnull)mime :(float)x :(float)y;
- (void)addImageWithBase64:(NSString * _Nonnull)base64 :(NSString * _Nonnull)mime :(float)x :(float)y :(float)width :(float)height;
- (void)addImage:(UIImage * _Nonnull)image :(float)x :(float)y;
- (void)addImage:(UIImage * _Nonnull)image :(float)x :(float)y :(float)width :(float)height;
- (void)addImageWithData:(NSData * _Nonnull)data :(float)x :(float)y;
- (void)addImageWithData:(NSData * _Nonnull)data :(float)x :(float)y :(float)width :(float)height;
- (void)circle:(float)x :(float)y :(float)r :(enum NSCPdfStyle)style;
- (void)ellipse:(float)x :(float)y :(float)rx :(float)ry :(enum NSCPdfStyle)style;
- (void)rect:(float)x :(float)y :(float)width :(float)height :(enum NSCPdfStyle)style;
- (void)renderToBuffer:(int32_t)index :(NSMutableData * _Nonnull)buffer :(int32_t)width :(int32_t)height;
- (void)renderToCGContext:(int32_t)index :(CGFloat)width :(CGFloat)height :(CGRect)rect in:(CGContextRef _Nonnull)context;
- (CGImageRef _Nullable)renderToCGContextImage:(int32_t)index :(CGFloat)width :(CGFloat)height :(CGRect)rect :(CGFloat)scaleX :(CGFloat)scaleY :(BOOL)withScale :(BOOL)flipVertical :(BOOL)flipHorizontal SWIFT_WARN_UNUSED_RESULT;
- (void)roundedRect:(float)x :(float)y :(float)width :(float)height :(float)rx :(float)ry :(enum NSCPdfStyle)style;
- (NSString * _Nonnull)table:(NSCPdfTable * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
@end

enum NSCPdfUnit : int32_t;

SWIFT_CLASS_NAMED("NSCPdfDocumentConfig")
@interface NSCPdfDocumentConfig : NSObject
@property (nonatomic) enum NSCPdfOrientation orientation;
@property (nonatomic, strong) NSCPdfPagerSize * _Nonnull size;
@property (nonatomic) enum NSCPdfUnit units;
@property (nonatomic) float deviceScale;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(enum NSCPdfOrientation)orientation :(NSCPdfPagerSize * _Nonnull)size :(enum NSCPdfUnit)units :(float)deviceScale OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, NSCPdfFontFamily, "NSCPdfFontFamily", open) {
  NSCPdfFontFamilyHelvetica = 0,
  NSCPdfFontFamilyTimes = 1,
  NSCPdfFontFamilyCourier = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, NSCPdfFontStyle, "NSCPdfFontStyle", open) {
  NSCPdfFontStyleNormal = 0,
  NSCPdfFontStyleBold = 1,
  NSCPdfFontStyleItalic = 2,
  NSCPdfFontStyleBoldItalic = 3,
};

typedef SWIFT_ENUM_NAMED(NSInteger, NSCPdfHorizontalAlign, "NSCPdfHorizontalAlign", open) {
  NSCPdfHorizontalAlignLeft = 0,
  NSCPdfHorizontalAlignCenter = 1,
  NSCPdfHorizontalAlignRight = 2,
};


SWIFT_CLASS_NAMED("NSCPdfInfo")
@interface NSCPdfInfo : NSObject
- (nonnull instancetype)initWithWidth:(NSUInteger)width height:(NSUInteger)height data:(NSData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("NSCPdfMargin")
@interface NSCPdfMargin : NSObject
@property (nonatomic) float top;
@property (nonatomic) float left;
@property (nonatomic) float bottom;
@property (nonatomic) float right;
- (nonnull instancetype)init:(float)top :(float)left :(float)bottom :(float)right OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUniform:(float)uniform OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(int32_t, NSCPdfOrientation, "NSCPdfOrientation", open) {
  NSCPdfOrientationLandscape = 0,
  NSCPdfOrientationPortrait = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, NSCPdfOverflow, "NSCPdfOverflow", open) {
  NSCPdfOverflowLineBreak = 0,
  NSCPdfOverflowEllipsize = 1,
  NSCPdfOverflowVisible = 2,
  NSCPdfOverflowHidden = 3,
};


SWIFT_CLASS_NAMED("NSCPdfPadding")
@interface NSCPdfPadding : NSObject
@property (nonatomic) float top;
@property (nonatomic) float left;
@property (nonatomic) float bottom;
@property (nonatomic) float right;
- (nonnull instancetype)init:(float)top :(float)left :(float)bottom :(float)right OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUniform:(float)uniform OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, NSCPdfPageBreak, "NSCPdfPageBreak", open) {
  NSCPdfPageBreakAuto = 0,
  NSCPdfPageBreakAvoid = 1,
  NSCPdfPageBreakAlways = 2,
};

enum NSCPdfStandardPaperSize : uint32_t;

SWIFT_CLASS_NAMED("NSCPdfPagerSize")
@interface NSCPdfPagerSize : NSObject
+ (NSCPdfPagerSize * _Nonnull)custom:(float)width :(float)height SWIFT_WARN_UNUSED_RESULT;
+ (NSCPdfPagerSize * _Nonnull)standard:(enum NSCPdfStandardPaperSize)value SWIFT_WARN_UNUSED_RESULT;
+ (NSCPdfPagerSize * _Nonnull)a4 SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, NSCPdfRotationDirection, "NSCPdfRotationDirection", open) {
  NSCPdfRotationDirectionCw = 0,
  NSCPdfRotationDirectionCcw = 1,
};


SWIFT_CLASS_NAMED("NSCPdfRotationOrMatrix")
@interface NSCPdfRotationOrMatrix : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSCPdfRotationOrMatrix * _Nonnull zero;)
+ (NSCPdfRotationOrMatrix * _Nonnull)zero SWIFT_WARN_UNUSED_RESULT;
+ (NSCPdfRotationOrMatrix * _Nonnull)angle:(float)deg SWIFT_WARN_UNUSED_RESULT;
+ (NSCPdfRotationOrMatrix * _Nonnull)matrix:(float)a :(float)b :(float)c :(float)d :(float)e :(float)f SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, NSCPdfShowFoot, "NSCPdfShowFoot", open) {
  NSCPdfShowFootEveryPage = 0,
  NSCPdfShowFootLastPage = 1,
  NSCPdfShowFootNever = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, NSCPdfShowHead, "NSCPdfShowHead", open) {
  NSCPdfShowHeadEveryPage = 0,
  NSCPdfShowHeadFirstPage = 1,
  NSCPdfShowHeadNever = 2,
};

typedef SWIFT_ENUM_NAMED(uint32_t, NSCPdfStandardPaperSize, "NSCPdfStandardPaperSize", open) {
/// ANSI Standard Paper A size (US Letter), 216 x 279 mm / 8.5 x 11.0 in
  NSCPdfStandardPaperSizeUSLetterAnsiA = 0,
/// US Half Letter size, 140 x 216 mm / 5.5 x 8.5 in
  NSCPdfStandardPaperSizeUSHalfLetter = 1,
/// US Government Letter size, 203 x 254 mm / 8.0 x 10.0 in
  NSCPdfStandardPaperSizeUSGovernmentLetter = 2,
/// US Legal size, 216 x 356 mm / 8.5 x 14.0 in
  NSCPdfStandardPaperSizeUSLegal = 3,
/// US Junior Legal size, 127 x 203 mm / 5.0 x 8.0 in
  NSCPdfStandardPaperSizeUSJuniorLegal = 4,
/// US Government Legal size, 216 x 330 mm / 8.5 x 13.0 in
  NSCPdfStandardPaperSizeUSGovernmentLegal = 5,
/// ANSI Standard Paper B size (US Ledger / Tabloid), 279 x 432 mm / 11.0 x 17.0 in
  NSCPdfStandardPaperSizeUSLedgerTabloidAnsiB = 6,
/// ISO 216 4A0, quadruple the size of ISO 216 standard A0, 1682 x 2378 mm
  NSCPdfStandardPaperSizeA0x4 = 7,
/// ISO 216 2A0, double the size of ISO 216 standard A0, 1189 x 1682 mm
  NSCPdfStandardPaperSizeA0x2 = 8,
/// ISO 216 A0, 841 x 1189 mm
  NSCPdfStandardPaperSizeA0 = 9,
/// ISO 216 A1, 594 x 841 mm
  NSCPdfStandardPaperSizeA1 = 10,
/// ISO 216 A2, 420 x 594 mm
  NSCPdfStandardPaperSizeA2 = 11,
/// ISO 216 A3, 297 x 420 mm
  NSCPdfStandardPaperSizeA3 = 12,
/// ISO 216 A4, 210 x 297 mm
  NSCPdfStandardPaperSizeA4 = 13,
/// ISO 216 A4R, equivalent to A4 rotated 90 degrees, 297 x 210 mm
  NSCPdfStandardPaperSizeA4R = 14,
/// ISO 216 A5, 148 x 210 mm
  NSCPdfStandardPaperSizeA5 = 15,
/// ISO 216 A6, 105 x 148 mm
  NSCPdfStandardPaperSizeA6 = 16,
/// ISO 216 A7, 74 x 105 mm
  NSCPdfStandardPaperSizeA7 = 17,
/// ISO 216 A8, 52 x 74 mm
  NSCPdfStandardPaperSizeA8 = 18,
/// ISO 216 A9, 37 x 52 mm
  NSCPdfStandardPaperSizeA9 = 19,
/// ISO 216 A10, 26 x 37 mm
  NSCPdfStandardPaperSizeA10 = 20,
/// ISO 216 B0, 1000 x 1414 mm
  NSCPdfStandardPaperSizeB0 = 21,
/// ISO 216 B1, 707 x 1000 mm
  NSCPdfStandardPaperSizeB1 = 22,
/// ISO 216 B2, 500 x 707 mm
  NSCPdfStandardPaperSizeB2 = 23,
/// ISO 216 B3, 353 x 500 mm
  NSCPdfStandardPaperSizeB3 = 24,
/// ISO 216 B4, 250 x 353 mm
  NSCPdfStandardPaperSizeB4 = 25,
/// ISO 216 B5, 176 x 250 mm
  NSCPdfStandardPaperSizeB5 = 26,
/// ISO 216 B6, 125 x 176 mm
  NSCPdfStandardPaperSizeB6 = 27,
/// ISO 216 B7, 88 x 125 mm
  NSCPdfStandardPaperSizeB7 = 28,
/// ISO 216 B8, 62 x 88 mm
  NSCPdfStandardPaperSizeB8 = 29,
/// ISO 216 B9, 44 x 62 mm
  NSCPdfStandardPaperSizeB9 = 30,
/// ISO 216 B10, 31 x 44 mm
  NSCPdfStandardPaperSizeB10 = 31,
/// ISO 216 C0, 917 x 1297 mm
  NSCPdfStandardPaperSizeC0 = 32,
/// ISO 216 C1, 648 x 917 mm
  NSCPdfStandardPaperSizeC1 = 33,
/// ISO 216 C2, 458 x 648 mm
  NSCPdfStandardPaperSizeC2 = 34,
/// ISO 216 C3, 324 x 458 mm
  NSCPdfStandardPaperSizeC3 = 35,
/// ISO 216 C4, 229 x 324 mm
  NSCPdfStandardPaperSizeC4 = 36,
/// ISO 216 C5, 162 x 229 mm
  NSCPdfStandardPaperSizeC5 = 37,
/// ISO 216 C6, 114 x 162 mm
  NSCPdfStandardPaperSizeC6 = 38,
/// ISO 216 C7, 81 x 114 mm
  NSCPdfStandardPaperSizeC7 = 39,
/// ISO 216 C8, 57 x 81 mm
  NSCPdfStandardPaperSizeC8 = 40,
/// ISO 216 C9, 40 x 57 mm
  NSCPdfStandardPaperSizeC9 = 41,
/// ISO 216 C10, 28 x 40 mm
  NSCPdfStandardPaperSizeC10 = 42,
/// ANSI Standard Paper B+ (Super B) size, equivalent to ANSI B with a 1 inch margin,
/// 330 x 483 mm / 13.0 x 19.0 in
  NSCPdfStandardPaperSizeAnsiBPlus = 43,
/// ANSI Standard Paper C size, 432 x 559 mm / 17.0 x 22.0 in
  NSCPdfStandardPaperSizeAnsiC = 44,
/// ANSI Standard Paper D size, 559 x 864 mm / 22.0 x 34.0 in
  NSCPdfStandardPaperSizeAnsiD = 45,
/// ANSI Standard Paper E size, 864 x 1118 mm / 34.0 x 44.0 in
  NSCPdfStandardPaperSizeAnsiE = 46,
/// North American architectural A size, 229 x 305 mm / 9.0 x 12.0 in
  NSCPdfStandardPaperSizeArchA = 47,
/// North American architectural B size, 305 x 457 mm / 12.0 x 18.0 in
  NSCPdfStandardPaperSizeArchB = 48,
/// North American architectural C size, 457 x 610 mm / 18.0 x 24.0 in
  NSCPdfStandardPaperSizeArchC = 49,
/// North American architectural D size, 610 x 914 mm / 24.0 x 36.0 in
  NSCPdfStandardPaperSizeArchD = 50,
/// North American architectural E size, 762 x 1067 mm / 30.0 x 42.0 in
  NSCPdfStandardPaperSizeArchE = 51,
};

typedef SWIFT_ENUM_NAMED(NSInteger, NSCPdfStyle, "NSCPdfStyle", open) {
  NSCPdfStyleS = 0,
  NSCPdfStyleF = 1,
  NSCPdfStyleDf = 2,
  NSCPdfStyleFd = 3,
};

enum NSCPdfVerticalAlign : NSInteger;

SWIFT_CLASS_NAMED("NSCPdfStyleDef")
@interface NSCPdfStyleDef : NSObject
@property (nonatomic) enum NSCPdfFontFamily font;
@property (nonatomic) enum NSCPdfFontStyle fontStyle;
@property (nonatomic) enum NSCPdfOverflow overflow;
@property (nonatomic, strong) NSCPdfColor * _Nullable fillColor;
@property (nonatomic, strong) NSCPdfColor * _Nullable textColor;
@property (nonatomic, strong) NSCPdfCellWidth * _Nonnull cellWidth;
@property (nonatomic) float minCellHeight;
@property (nonatomic) enum NSCPdfHorizontalAlign horizontalAlign;
@property (nonatomic) enum NSCPdfVerticalAlign verticalAlign;
@property (nonatomic) float fontSize;
@property (nonatomic, strong) NSCPdfPadding * _Nonnull cellPadding;
@property (nonatomic, strong) NSCPdfColor * _Nullable lineColor;
@property (nonatomic) float lineWidth;
- (void)updateMinCellWidth:(float)value;
- (float)getMinCellWidth SWIFT_WARN_UNUSED_RESULT;
- (NSCPdfStyleDef * _Nonnull)clone SWIFT_WARN_UNUSED_RESULT;
+ (NSCPdfStyleDef * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSCPdfTableCellOrString;
enum NSCPdfTableTheme : NSInteger;

SWIFT_CLASS_NAMED("NSCPdfTable")
@interface NSCPdfTable : NSObject
@property (nonatomic, copy) NSArray<NSCPdfColumnDef *> * _Nullable columns;
@property (nonatomic, copy) NSDictionary<NSCPdfColumnKey *, NSCPdfStyleDef *> * _Nullable columnStyles;
@property (nonatomic, strong) NSCPdfStyleDef * _Nullable styles;
@property (nonatomic, strong) NSCPdfStyleDef * _Nullable alternateRowsStyles;
@property (nonatomic, strong) NSCPdfStyleDef * _Nullable headStyles;
@property (nonatomic, strong) NSCPdfStyleDef * _Nullable bodyStyles;
@property (nonatomic, strong) NSCPdfStyleDef * _Nullable footStyles;
@property (nonatomic, copy) NSArray<NSArray<NSCPdfTableCellOrString *> *> * _Nonnull head;
@property (nonatomic, copy) NSArray<NSArray<NSCPdfTableCellOrString *> *> * _Nonnull body;
@property (nonatomic, copy) NSArray<NSArray<NSCPdfTableCellOrString *> *> * _Nonnull foot;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull position;
@property (nonatomic) enum NSCPdfTableTheme theme;
@property (nonatomic) enum NSCPdfPageBreak pageBreak;
@property (nonatomic) enum NSCPdfShowHead showHead;
@property (nonatomic) enum NSCPdfShowFoot showFoot;
@property (nonatomic, strong) NSCPdfMargin * _Nonnull margin;
- (void)updatePosition:(float)x :(float)y;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("NSCPdfTableCell")
@interface NSCPdfTableCell : NSObject
- (nonnull instancetype)init:(NSString * _Nonnull)content :(NSInteger)colSpan :(NSInteger)rowSpan :(NSCPdfStyleDef * _Nonnull)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("NSCPdfTableCellOrString")
@interface NSCPdfTableCellOrString : NSObject
- (nonnull instancetype)initWithString:(NSString * _Nonnull)string cell:(NSCPdfTableCell * _Nullable)cell OBJC_DESIGNATED_INITIALIZER;
+ (NSCPdfTableCellOrString * _Nonnull)String:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
+ (NSCPdfTableCellOrString * _Nonnull)Cell:(NSCPdfTableCell * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, NSCPdfTableTheme, "NSCPdfTableTheme", open) {
  NSCPdfTableThemeStriped = 0,
  NSCPdfTableThemeGrid = 1,
  NSCPdfTableThemePlain = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, NSCPdfTextAlignment, "NSCPdfTextAlignment", open) {
  NSCPdfTextAlignmentLeft = 0,
  NSCPdfTextAlignmentCenter = 1,
  NSCPdfTextAlignmentRight = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, NSCPdfTextBaseline, "NSCPdfTextBaseline", open) {
  NSCPdfTextBaselineAlphabetic = 0,
  NSCPdfTextBaselineIdeographic = 1,
  NSCPdfTextBaselineBottom = 2,
  NSCPdfTextBaselineTop = 3,
  NSCPdfTextBaselineMiddle = 4,
  NSCPdfTextBaselineHanging = 5,
};


SWIFT_CLASS_NAMED("NSCPdfTextOptions")
@interface NSCPdfTextOptions : NSObject
@property (nonatomic) enum NSCPdfTextAlignment align;
@property (nonatomic) enum NSCPdfTextBaseline baseline;
@property (nonatomic, strong) NSCPdfRotationOrMatrix * _Nonnull angle;
@property (nonatomic) enum NSCPdfRotationDirection rotationDirection;
@property (nonatomic) NSInteger charSpace;
@property (nonatomic) float horizontalScale;
@property (nonatomic) float lineHeightFactor;
@property (nonatomic) NSInteger maxWidth;
- (PdfNativeTextOptions)pdfium SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("NSCPdfTiledView")
@interface NSCPdfTiledView : UIScrollView <UIScrollViewDelegate>
@property (nonatomic, strong) NSCPdfDocument * _Nullable document;
@property (nonatomic, copy) void (^ _Nullable onLoaded)(NSCPdfDocument * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable onError)(NSError * _Nullable);
@property (nonatomic, copy) void (^ _Nullable onPageChange)(NSInteger);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)loadFromBytes:(NSData * _Nonnull)bytes :(NSString * _Nullable)password;
- (void)loadFromPath:(NSString * _Nonnull)path :(NSString * _Nullable)password;
- (void)loadFromUrl:(NSString * _Nonnull)url :(NSString * _Nullable)password;
@end

typedef SWIFT_ENUM_NAMED(int32_t, NSCPdfUnit, "NSCPdfUnit", open) {
  NSCPdfUnitMm = 0,
  NSCPdfUnitPoints = 1,
  NSCPdfUnitCm = 2,
  NSCPdfUnitInches = 3,
};

typedef SWIFT_ENUM_NAMED(NSInteger, NSCPdfVerticalAlign, "NSCPdfVerticalAlign", open) {
  NSCPdfVerticalAlignTop = 0,
  NSCPdfVerticalAlignMiddle = 1,
  NSCPdfVerticalAlignBottom = 2,
};

@class UICollectionView;
@class NSIndexPath;
@class UICollectionViewCell;
@class UICollectionViewLayout;

SWIFT_CLASS_NAMED("NSCPdfView")
@interface NSCPdfView : UIView <UICollectionViewDataSource, UICollectionViewDataSourcePrefetching, UICollectionViewDelegateFlowLayout>
- (void)collectionView:(UICollectionView * _Nonnull)collectionView prefetchItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView cancelPrefetchingForItemsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@property (nonatomic, strong) NSCPdfDocument * _Nullable document;
@property (nonatomic, copy) void (^ _Nullable onLoaded)(NSCPdfDocument * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable onError)(NSError * _Nullable);
@property (nonatomic, copy) void (^ _Nullable onPageChange)(NSInteger);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)loadFromBytes:(NSData * _Nonnull)bytes :(NSString * _Nullable)password;
- (void)loadFromPath:(NSString * _Nonnull)path :(NSString * _Nullable)password;
- (void)loadFromUrl:(NSString * _Nonnull)url :(NSString * _Nullable)password;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
